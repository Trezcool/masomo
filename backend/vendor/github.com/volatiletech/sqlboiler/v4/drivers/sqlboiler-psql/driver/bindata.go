// Code generated by go-bindata. DO NOT EDIT.
// sources:
// override/templates/17_upsert.go.tpl (5.763kB)
// override/templates/singleton/psql_upsert.go.tpl (1.317kB)
// override/templates_test/singleton/psql_main_test.go.tpl (4.974kB)
// override/templates_test/singleton/psql_suites_test.go.tpl (255B)
// override/templates_test/upsert.go.tpl (1.746kB)

package driver

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates17_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x73\xe3\xb8\x0d\x7f\x96\x3e\x05\x2e\xd3\xb9\x48\x1d\x47\xe9\x73\x3a\x7e\xc8\x9f\xbd\x6d\xe6\xba\x39\x77\x73\xe9\xce\xf4\xe6\x26\x23\x4b\x90\xcd\x09\x4d\x6a\x29\x2a\x8e\xab\xea\xbb\x77\x00\x51\x96\x64\xcb\x89\x77\x7b\xd7\x6e\x9f\x62\x91\x20\xf0\x23\xf0\x03\x01\xa4\xaa\xce\xe0\x0f\xb1\x14\x71\x01\x17\x53\x88\x2e\xe9\x17\x16\xd1\xcf\xf1\x5c\x22\x34\x7f\xa2\xbb\x78\x85\x75\xed\xb3\x68\x91\x2c\x71\x15\x37\xdb\x74\xa0\x93\x80\x7f\x41\x74\xdf\xed\xf2\x01\x91\x41\x74\x99\xa6\xef\xa5\x9e\xc7\x12\xce\xea\xda\x3f\x3f\x87\x87\xbc\x40\x63\xdf\x43\x6c\x2d\xae\x72\x5b\x40\xac\x40\x28\x5a\x9b\x40\xac\x52\x48\x35\xf2\x5a\x99\xa7\xb1\x45\xd0\x06\xc4\x42\x69\x83\xa0\x15\x24\x5a\x65\x52\x24\x36\xf2\xb3\x52\x25\x10\x68\xf8\x63\x55\x35\xf8\xa3\x87\xfc\x5e\xa8\x45\x29\x63\x53\xd7\x61\x6b\x25\x60\x10\x4a\x5b\x88\xee\xf4\xb5\x56\x16\x5f\x6c\x5d\x27\xf6\x85\x54\xd1\x47\xe4\x16\x27\x50\x55\xa8\x52\x02\xe9\x2c\xff\xa4\xae\x9d\x35\x98\x6b\x2d\x27\x5b\xe3\xd7\x5a\x96\x2b\x55\xc0\x2f\xbf\x16\xd6\x08\xb5\x98\xb8\x03\x6e\x7d\xe2\x6e\xd3\x8a\xcd\xb5\x90\x91\xfb\x08\x01\x8d\xd1\x06\x2a\xdf\x33\x68\x4b\xa3\x40\x47\x0d\xd2\x06\x68\x1f\x24\x9f\x7b\x8f\xf6\xe6\x2a\x08\xab\x0a\x65\x81\x0c\x7c\x02\xed\x86\x93\x74\xfb\x2a\xad\xeb\xc9\x1e\xf4\x3d\xd4\xaf\x83\x0d\xfd\xda\xf7\xb7\x8e\xf0\x9b\x10\x52\x50\x7a\x61\xa4\x9f\xb3\x58\x89\x64\x27\xa0\xb3\xff\x2c\xa2\xc0\x3a\x0b\x5a\x63\x1f\x1d\x1d\xe2\xd9\x37\x17\xe3\xca\xf7\x44\x46\xb7\xa0\x14\xf9\xc6\x02\xfc\x67\xc6\xf5\xdd\x14\x94\x90\x04\xd4\xcb\xc9\xed\x01\x9b\xfc\x64\xe2\xfc\x9d\x31\x01\x1a\x13\x86\xbe\x57\x8f\x91\xe1\x40\xf4\xc7\x82\x0f\x65\x21\xd4\x82\xbe\xf1\x05\x93\xd2\x6a\xf3\x25\x09\xde\x53\x9d\x7f\x1d\x33\x66\xfb\x2e\x27\x20\x8d\x7b\xdf\x39\x48\x3d\xc7\xef\xd3\xa5\x13\x77\x4b\xbd\x53\xe3\xe1\xf8\x2f\xd1\x68\x84\xec\x7d\x72\x13\xee\xff\x29\x55\xb6\xc1\xfb\x3d\x68\x71\x8f\x38\xf0\x14\xa4\x3a\x29\x57\xa8\x6c\x6c\x85\x56\x90\x69\x03\x4b\xbd\x06\xab\x21\x37\x3a\x47\x23\x37\x50\x16\x38\xbc\x2b\x5b\x1c\x5c\xf7\x58\x56\xfd\x9f\x93\x6a\x5b\x7f\x44\x06\x1a\xa6\x5d\x70\x5d\x3d\xe2\xfd\x22\xba\xc3\x75\x70\x52\x55\xd1\xec\x69\xd1\x94\xff\x0b\x50\x1a\xaa\x6a\xd0\x12\x90\x7f\x9f\x45\x8a\x29\xfb\xbc\x64\xf7\x9c\x30\x1b\x7c\x8f\xba\x05\x8a\xbc\xa4\x58\x9e\x58\xb1\xc2\xc2\xc6\xab\xfc\xb1\x91\x7a\x5c\xa2\xcc\xd1\x9c\x40\x04\x75\x23\xdd\x91\xfa\x2f\x5a\x3f\x15\x4c\xa3\x01\xfd\x53\x7d\x85\x99\x36\xd8\x44\x81\x85\x8e\xce\x85\x7d\x2a\x77\xb7\x25\xb8\x8c\x96\x9d\xef\xfb\x9e\xfa\xe7\x0d\x66\x71\x29\x2d\xb7\x44\x9f\x4b\x34\x02\x8b\xe8\x4e\xab\x7f\xa0\xd1\x6e\xeb\x1e\x89\x07\x8e\x25\x37\x7a\xad\x3a\x9e\x38\x4f\x7f\x12\x76\xe9\x84\x27\xa0\x43\xdf\xf7\xce\xcf\xe1\xaa\x14\x32\x85\x24\x4e\x96\x08\x4f\xb8\x01\xa1\xce\xa4\x50\x08\xe5\x42\x0a\xb9\x81\x33\x58\x6d\x8a\xcf\x12\x9e\x0b\xc8\xe9\x6f\x6e\xf4\x5c\xe2\xaa\xf0\xbd\x79\x99\x11\x98\xc2\x9a\x55\xac\x16\x12\xa9\x3a\x5c\x95\x59\x86\x26\x08\xd9\x4d\x7b\x94\xa1\x4b\xce\xcb\x2c\xfa\x64\x84\xc5\xab\x8d\xc5\xe0\xd4\x9e\x52\x6c\x80\xa8\x39\xb6\x9d\xf1\xb6\xbf\xbb\x1c\xd1\x32\xc5\xf7\x71\x02\x09\x81\x30\xb1\x5a\xe0\x1e\x19\x07\x0a\xef\x99\x97\x41\x72\x58\xe1\xae\x68\x61\x4d\xa2\xd5\x73\x74\x6b\x75\x1c\x0c\xe8\x1c\xfd\x28\x54\x1a\x8e\x62\x18\xca\x5d\x6b\xf9\xdb\xc2\x18\x3e\x0f\x87\x61\x0c\xe5\xbe\x06\xc6\xbe\xce\x1e\x09\x5f\xd1\x45\x1c\xba\x98\x02\xed\xba\x8d\xd0\xf7\x3a\x92\xcc\xca\x96\x24\xf3\x32\x0b\x39\xcd\x46\x29\xdb\xa4\xd4\x35\xd1\xf2\x43\x69\xa3\x8f\x7f\xd5\xc9\x13\x69\x62\xa2\x4e\x1a\xbe\xa6\x64\xe8\xed\xf3\xbf\x3c\xe1\xe6\xd7\xa3\x0d\x3d\x28\xd9\x98\xf2\xbd\xe7\xd8\x70\x8e\xf2\xfb\xe3\x33\xa7\xbf\x73\x86\xc9\x01\x6d\x3b\x69\xd0\x12\x90\xa1\xcb\x6f\x7b\x5f\x94\x99\xbe\xe7\x1d\x42\x70\x29\x65\xfb\x4c\xbe\x22\x35\x92\xc3\xc7\x49\xeb\xd2\xf6\x0f\x74\x51\xa4\xcf\xd0\xf7\x3c\x57\xdc\x2e\xa6\x3b\xe4\x7d\xe8\x7d\xfd\x26\x57\x98\x19\xb1\x8a\xcd\xe6\x47\xdc\xf4\x84\xc9\xd1\xa3\xaf\xc5\xf7\xdf\x83\x44\xe5\x12\x2f\xa4\xb2\xf0\x27\x76\xfb\xdb\x55\xa1\x54\x3c\x0b\x5a\xed\xde\xff\xdd\x1a\x41\x65\xab\x94\x29\xbf\xd2\x73\x7e\xfe\x9c\x0b\x12\x86\x05\x52\x14\x5c\x33\xb8\x68\x78\xed\xab\x42\x0e\xda\x79\x61\x1a\xe4\x84\xb2\xdd\xe8\xe3\xdc\x1e\x9c\xc2\x2a\x7e\xc2\xa0\xab\x8d\x74\xe2\x58\x1f\x51\x7e\x93\xae\x7c\xb3\x35\x32\x39\x44\xfa\xfd\xc3\x7c\x09\xaf\xc9\x9a\x88\xea\xc6\x06\xa6\xcd\x9d\x1b\xde\xff\x8d\x96\x66\xba\xb0\x0b\x83\x45\x90\x8a\x58\x22\xe9\x3f\xa9\xaa\xfe\x58\x5d\xd7\x27\x63\xad\x9b\x41\xdb\x2e\x77\x9d\x40\x5b\xea\x39\xae\x8d\xdd\xe7\x58\x96\xf8\x21\xce\x73\xbe\x3c\x65\x54\x57\xc3\xae\x84\x4a\xdd\xd6\x21\x97\xfc\xbc\xc9\xf1\xe0\x95\xb7\x6a\x5b\xab\x5e\x5b\xa1\x7b\x95\x75\x50\x5a\xd9\x21\x2e\x6c\x06\x6d\x48\x82\x6d\xc4\x18\xae\x41\xfb\x7b\x83\x25\xbb\x64\x70\x04\xea\x10\x2b\x83\xad\x9b\xf6\x85\xdd\xc8\xcf\x31\x66\x14\xa6\xe8\x56\xa5\xc2\x60\x62\x83\x76\xe1\xef\x24\xf1\x53\x16\x68\x22\xcd\x73\x2c\x07\xdd\x02\x6f\x16\x3f\x18\xbd\x6a\xaf\xc0\x0a\xdd\x5b\x3a\x08\x52\xd8\xbc\x7d\x0d\x12\x6a\xea\x84\xb2\x68\xb2\x38\xc1\xaa\xe9\x80\x98\xf2\x3b\xce\xea\x39\xb2\x3d\xd8\x19\x9f\x59\x73\xd8\x74\x4f\x47\xdb\xa8\x0d\xda\xd9\x6d\xe3\xc5\x6d\xe3\x0d\xce\xcb\xc5\x07\x9d\x36\x0d\x43\xb6\xb2\xd1\x0f\xb9\x11\xca\x4a\x15\x74\xfb\x5c\x98\x4c\x6b\x80\x89\x1f\xbe\x2d\x4d\x2e\x0b\x5d\xf3\xc5\x2d\xc9\xc0\xf0\x6d\xc1\xc2\x41\x62\x5f\x78\x10\xf2\xd6\x7c\x8c\xab\xdd\x8e\x2a\xba\x2a\xcb\xed\xda\x5c\x1f\x81\x6b\x3d\x86\xa6\x9d\x62\x8e\xf0\xfe\xa8\xf7\xbc\x86\xc9\xd4\x79\x46\x9c\xf4\x1f\xf5\x3a\xe8\xa1\x68\xcc\x45\x51\x14\x46\xf7\x49\xcc\x99\x41\x21\xa4\x05\x56\xd9\xb9\x63\x4c\x93\x33\x15\x70\x9f\xfb\x25\x5a\xdd\xb5\xb6\x99\x30\x9d\x42\xf1\x59\x46\xef\x8c\xb9\xd3\x1f\xf5\xba\xe9\x34\x9c\x45\x4a\x91\xf3\x73\x68\x5f\x2b\x1e\xce\xd4\xa9\x75\x34\x85\x58\x6d\xec\x92\xa6\xb8\xf5\x12\x15\xd8\x25\x1a\x3c\x2d\x68\x42\x68\x5e\x28\x97\x47\x5d\xab\x39\xee\xa6\xc7\x36\xe7\xf9\x7e\x34\x06\x8d\x7b\x69\xd7\x29\xfb\xe7\xde\xf6\xc9\xd0\x05\xdd\x6c\x31\x3a\x13\x50\xad\xa3\x09\x97\xc6\x5b\x7e\xa0\xbf\xa4\xe2\xb5\x13\xd0\x4e\x07\x73\x5c\x4b\xd4\xb6\x5e\x47\x88\x73\xab\x05\xd3\xe6\xba\x47\x1b\xd8\xb6\x5c\xde\x2b\x73\xd7\xf6\x7f\x93\xa9\xbe\xcc\x2c\x9a\xaf\x9a\xb9\xdc\x54\xb5\x0d\x9b\x53\xaa\x84\xec\xcf\x5b\xb5\xff\xef\x00\x00\x00\xff\xff\xfb\x0c\xc0\xc0\x83\x16\x00\x00")

func templates17_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates17_upsertGoTpl,
		"templates/17_upsert.go.tpl",
	)
}

func templates17_upsertGoTpl() (*asset, error) {
	bytes, err := templates17_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/17_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0x7b, 0xf4, 0xcd, 0x7e, 0x44, 0x8a, 0x0, 0x23, 0xfe, 0x2e, 0xcd, 0xf9, 0xb1, 0xc6, 0x80, 0x65, 0x26, 0x32, 0x80, 0xeb, 0x9b, 0x81, 0x96, 0x6d, 0xfd, 0x35, 0x68, 0x3, 0xfa, 0xdd, 0x87}}
	return a, nil
}

var _templatesSingletonPsql_upsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x5f\x6b\xdb\x3e\x14\x7d\x96\x3e\xc5\xad\xa0\xd4\x06\xe1\xfe\xfa\xfa\x83\x3c\xb4\xb1\xdb\x65\x04\xbb\x89\xed\x6d\x30\xf6\xe0\xd8\xd7\xa9\xc0\x91\x33\xfd\xc9\x56\xd6\x7c\xf7\x21\xc7\xae\xd3\xa6\xa3\x14\x82\x12\x74\xef\x39\x3a\xf7\xe8\x28\x97\x97\xb0\xb2\xa2\xa9\xf2\xad\x46\x65\x16\x16\xd5\xe3\x7d\xab\xcd\x5a\xa1\x3e\x14\x34\x14\x90\x2e\xe6\xa0\x4d\x61\x70\x83\xd2\x80\x36\x4a\xc8\x35\x58\xed\x56\xf3\x80\x60\x3b\x6c\x58\x98\x02\xb6\xaa\xdd\x89\x0a\xab\x80\xd6\x56\x96\xff\xa4\xf6\x2a\x51\x40\xa5\xc4\x0e\x95\x0e\x42\x51\x34\x58\x1a\x0e\xa6\x58\x35\x18\x17\x1b\xec\x8f\xe0\x60\xb7\x55\x61\x30\x91\xd3\x56\xd6\x8d\x28\x0d\xac\xda\xb6\xe1\xa0\xd0\x0c\x35\x0e\x65\x5f\xe3\xf0\xeb\x41\x18\x6c\x84\x36\xf0\xfd\xc7\x81\xc1\x1f\xc4\xfe\xa1\x64\xe8\x83\x89\xdb\xdc\x14\x72\xdd\x60\x30\xab\x50\x9a\x85\x6d\x0d\xa6\x8d\x28\xd1\xe9\x0a\xe6\x0b\x0e\xee\x7b\xb9\x18\xc9\x7d\x4a\x46\xf6\x8f\x10\x3c\xa3\x7c\x4a\x14\x7e\x0c\xab\xd0\xf8\x94\x92\x95\xad\xe1\xff\x63\xdc\x1d\x9a\x1b\x5b\xd7\xa8\x3c\x9f\x92\x0a\x6b\x54\x47\xc5\x7b\x3b\x14\x57\xb6\x76\xf0\xb2\x6d\xec\x46\x6a\x47\xc1\xc2\xe8\xf6\x3a\x9f\x67\xf0\xe5\x7a\x9e\x47\x29\xa3\x44\xd4\xd0\xa0\xf4\x46\x95\x70\x36\x81\xff\x9c\x5d\xcf\xb8\x09\xd4\x1b\x13\xa4\x5b\x25\xa4\xa9\x3d\xe6\x9d\x6b\xbf\xc7\x83\xfb\xcd\x38\x25\x84\x1c\x6c\xd6\xc1\xe7\x56\x1c\xb1\x71\x60\x1c\x98\x3f\x74\x0c\x0a\x9b\xa2\xc4\x87\xb6\xa9\x50\x75\x41\x08\x72\x8d\x33\x59\xe1\xef\xe3\x02\x7f\xa5\x8b\xc3\x15\x87\x2b\xdf\xa7\x64\x4f\x29\x71\x8a\x6e\x7b\x45\x94\x38\x87\xdc\x19\x6c\x16\xa7\xd1\x32\x83\x59\x9c\x25\x70\xae\xdd\x27\x89\x61\x9a\xc4\xb7\xf3\xd9\x34\x83\x4e\xe9\x73\xc6\xf8\x38\x22\xa7\xc4\x19\x25\x6a\x38\x3b\x09\xdc\xd3\x53\x27\xe4\xb0\xef\xc3\x64\x70\x67\x65\xeb\xe0\xab\x12\x06\xd3\x6e\x72\x8f\x85\x09\xc4\x49\xf6\x69\x16\xdf\x31\x27\x12\xb0\xd1\xf8\xb2\xf3\xe6\xd1\xa0\x77\xe1\x5d\xf8\x6f\xc0\x5f\xf8\x37\x26\xba\xb3\xef\xad\x7e\xe6\x43\x98\x40\x7e\x1f\x5e\x67\x11\xa4\x51\x06\xcc\x4d\x40\xea\x56\x81\xe0\xb0\x73\x97\xad\x0a\xb9\xc6\xfe\x95\x74\x42\xdc\x80\x62\xbc\xdf\x13\x65\xbc\x53\x46\xf6\x6e\xf9\xe9\x52\x59\xbd\x8c\xdd\x18\xd7\x93\xa4\xee\x3a\xe4\x6b\x91\x07\x92\x37\x4b\x0c\x26\x10\x7d\x9b\xce\xf3\x30\x0a\x03\xf6\x0e\x7a\x7f\xb8\xf4\x3e\xab\xee\x55\x8c\x53\x9c\x12\x2f\xa3\x2c\x5f\xc6\xb3\xf8\x0e\xd8\xbb\x4e\x77\x7f\x24\x83\xc9\xee\x0c\x85\xc6\x2a\x09\x0e\xd4\xf7\xfb\x74\x4f\xff\x06\x00\x00\xff\xff\x76\xcb\x6a\x7a\x25\x05\x00\x00")

func templatesSingletonPsql_upsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSingletonPsql_upsertGoTpl,
		"templates/singleton/psql_upsert.go.tpl",
	)
}

func templatesSingletonPsql_upsertGoTpl() (*asset, error) {
	bytes, err := templatesSingletonPsql_upsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/singleton/psql_upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcb, 0x25, 0xb2, 0xa1, 0x78, 0x77, 0xde, 0x3, 0x46, 0x95, 0xac, 0xcf, 0xb0, 0xa1, 0xf5, 0xf1, 0x14, 0x37, 0x11, 0x4d, 0x5f, 0x91, 0x90, 0x62, 0xc7, 0x92, 0xef, 0xee, 0x53, 0xcb, 0xb2, 0x5f}}
	return a, nil
}

var _templates_testSingletonPsql_main_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xe3\xb8\x11\xfe\x2c\xfd\x8a\x39\x03\x39\x48\x5b\x87\x3e\xf4\xe5\x4b\x0e\xc6\x21\x71\x9c\x74\x71\xd9\x24\x6b\xbb\x3d\x14\xdd\xf6\x8e\x96\x46\x0e\x11\x89\x64\x48\x2a\x59\xf7\x90\xff\x5e\x0c\x29\xd9\xb2\x63\x25\xdb\x6e\x0b\xdc\xa7\x84\xe4\x33\xef\x0f\x87\x23\x3f\x72\x03\x66\xf5\xf9\xf6\xf2\xe2\x1e\xd7\x30\x06\x83\x2b\xfc\xac\xd9\x87\xda\xba\x89\xaa\xb4\x28\x31\xf9\x25\xf9\xa1\x4a\xff\x79\x7a\xb5\x98\xce\x60\x71\x7a\x76\x35\x05\xf6\xee\x93\xfc\x64\x7f\x77\x7a\x7e\x0e\x93\x9b\xeb\xf9\x62\x76\xfa\xfe\x7a\x01\xec\xdd\x0f\x70\x71\x33\x9b\xbe\xbf\xbc\x86\x1f\xa7\x7f\xa3\xf5\xf7\x9f\xe4\x2f\x69\x1c\xbb\xb5\x46\xd0\xab\x05\x5a\x87\x06\xac\x33\x75\xe6\xe0\xd7\x38\xca\x97\x13\x25\x25\xbc\xb3\x0f\x25\x3b\x3f\x8b\x69\xe3\x9a\x57\x08\x04\x11\x72\x15\x47\x77\xca\x3a\x80\xed\xba\xb6\x68\xba\x6b\xcd\xad\xed\xae\xad\x2d\x2b\x95\xe3\xf6\x5c\x19\x2f\x2f\xa4\x8b\xe3\x48\xaf\x6e\xb9\xb5\x17\xa2\xdc\x00\xe2\xc8\xa1\x75\xe7\x67\xde\xea\x46\xc9\xbd\xd0\xf3\x8f\x57\x93\x2a\x87\xa5\x52\x65\xfc\x1c\xc7\x45\x2d\x33\x10\x52\xb8\x24\x0d\x7e\x7f\xe0\x42\xc2\x18\xbe\x6d\x83\xfa\xf5\x99\x60\xa3\x11\x58\x74\xb5\x86\xbc\xae\xb4\x05\x77\x87\x90\x73\xc7\x97\xdc\x22\xd8\xec\x0e\x2b\x0e\x5c\xe6\x20\x2a\xf2\xcb\x82\x70\xe4\x98\x02\x0e\x0e\x69\x8b\x9b\x35\x18\x2e\x73\x55\x95\x6b\xd2\xb5\x42\x89\x86\x3b\xcc\x81\xbc\xec\xa8\x52\xe0\xee\xb8\xf3\xbb\x16\x32\x2e\x61\x89\x60\x6a\x09\x7c\xc5\x85\xb4\x8e\x14\xd7\x56\xc8\x15\x79\xb0\xab\xc8\x3e\x94\x4b\x25\x4a\x34\x70\x33\xfb\x00\x9a\x67\xf7\x7c\x85\x2c\xc4\x97\x68\x78\xd7\xc6\x93\x86\x40\x92\x14\xd0\x18\x65\x28\x68\x62\x0a\x1a\x13\x36\xe2\x38\x7a\x14\x1a\x0d\x9b\xa3\x3b\xc7\x82\xd7\xa5\x4b\x06\x9a\xea\x18\xe2\x1c\x0c\x61\xa0\xeb\x65\x29\xb2\x41\xda\x0b\xa5\x2c\x0c\x86\xf0\xa7\x3f\xfe\xe1\xf7\xfd\xa0\xa6\xa4\xa4\xd0\xe0\x43\x2d\x0c\x0e\x52\xaa\x25\x6b\xb8\x32\x86\x20\x78\x89\x6e\xee\x0b\xd8\xc8\xe5\x4b\xc9\x2b\xc2\x46\x9a\x79\x1a\xf5\x01\xe9\x30\xc0\x3c\xbb\xfa\x60\x74\x18\x60\x9e\x74\x7d\x30\x3a\x6c\x60\xc4\xbd\x0e\xec\xbd\xdc\x89\xdb\x63\x5a\xbe\xf6\x69\x6b\x83\xf7\xe0\x0e\x55\xfb\xf0\x04\xe9\x06\xde\xa1\x72\x47\xe4\x4c\xa9\xb2\x35\x70\x2f\xe8\x6f\x56\xe5\x3e\xab\x54\xdf\x31\x3c\xf2\x92\xb3\x33\x5c\x09\xf9\x57\x5e\x8a\x9c\x3b\xa1\x64\x92\xb2\x66\x81\x49\x1c\x45\x1e\x12\x4c\x5f\x2b\x37\xad\xb4\x5b\x27\x21\x81\x54\xf8\x6d\xbe\x86\xbd\x58\x4a\x7b\x8b\x0d\x25\xd8\x60\xaf\x95\x4b\xfc\x3f\xd3\x87\x9a\x97\x36\x09\xb9\x1c\xc2\x77\x2d\x3e\x24\xf0\x15\xe5\x81\x1b\x2d\xbc\xcd\x48\x3f\xbe\xc9\x73\x2b\xb0\x49\xfb\x30\x8e\x52\x36\xb9\xc3\xec\x3e\xa1\xf4\x88\xc2\xdf\x80\x6f\xc6\x20\x45\x49\x77\x22\x32\xe8\x6a\x23\x69\x37\x8e\x9e\xe3\x38\x1a\x8d\x40\x14\x20\x95\xbf\x9b\x74\x03\xcf\xcf\x80\x28\x81\xb9\x97\x2e\x51\x26\xdd\x42\xa6\x30\x1e\xc3\x77\x5e\xd3\x68\x04\x13\x83\xdc\x21\xf0\xa6\x09\x88\x7f\x61\x0e\xf9\x12\xc8\x79\x16\x47\xfb\x0c\xd8\x80\xd8\xdc\xf1\x65\x89\xe1\x60\x13\x7c\x1a\x1c\x6a\x5c\x1e\x83\x66\x15\xbf\xc7\xdb\xcb\xb6\x05\x26\xe9\xf7\x6f\x05\x23\x0a\xf8\x66\x87\x43\x04\xea\x28\xcc\x8d\xd2\x0b\xef\xd2\x01\x65\x3b\xda\xa2\xe7\x5d\xc9\xcc\x47\xfa\xc5\xb2\x71\x14\x51\x47\x25\x17\x4e\xc6\x80\x9f\x31\x63\x13\x55\x55\x5c\xe6\xc9\x40\xaf\x7e\xa6\x33\xea\x0f\xc7\xc7\xa1\xf9\x1c\x2b\x59\xae\x07\x43\xe8\xa4\xa2\x95\x67\x53\xf9\x08\x63\xe0\x5a\xa3\xcc\x13\x65\x69\x2d\x0c\xd1\x9b\xe0\x7a\x35\x95\x8f\x49\xca\x18\x23\x91\xe0\xe4\x61\xa3\xf6\xa1\xf4\x06\x3a\xa5\xec\x4a\x7c\xb9\x19\x4a\xfb\x10\x9e\xc8\x84\x50\xec\x56\x68\x4c\x3a\xee\xce\x5d\x4e\xa9\x39\x19\xc3\xb7\xcb\xb5\x43\xcb\xce\xea\xa2\xf0\xaf\x4d\xc7\x58\x3f\xa8\x13\xf7\xdc\xe5\xaa\xa6\x7e\xf4\xb4\xbb\x19\x2a\xb2\x63\x2e\xde\x89\x64\xee\x72\xff\xd4\x49\x7c\xba\xf8\x11\xd7\xe7\x68\x9d\x51\x6b\x34\xc9\x66\x6a\x18\x82\x49\xf7\x45\x82\xda\x3d\x17\xe3\x2e\x09\xb6\x3e\x70\xe3\x5e\xe7\x80\x32\x96\xfd\x64\xb8\x4e\xd0\x50\x7b\x29\xb8\x28\xe9\x4d\x54\x60\x49\x16\x1a\x06\x40\x16\xaa\x43\x9d\x6f\x97\x6f\x5d\xcf\xbe\xda\x98\x7d\x28\xf7\x2c\x1d\x8a\xea\x27\x2e\x0e\xda\x29\x2a\xc7\x6e\x8d\x90\xae\x94\x64\x20\xdd\xdf\xdb\x29\x44\xd3\xa7\x92\x34\xfd\x42\x17\x9f\xb8\x70\x50\x28\xd3\x93\x92\x38\x8a\x7e\x26\x06\xb0\x49\xa9\x2c\x26\x29\x8c\x46\x70\x5a\xd0\x48\xd6\xde\x2e\x61\x21\x57\x12\x87\x90\x11\xc2\x0f\x30\x4f\x46\x38\x04\x94\x39\xa8\xc2\x6f\x68\xa1\x31\x3e\x9c\xde\xff\x36\xea\x3d\x9e\x7c\x45\xdc\x2f\xab\xe3\xe3\x6e\x74\x48\xb1\x9d\xe6\x76\xa7\x1d\x53\xcb\x49\x95\x27\x96\xc8\x3e\x6c\x35\x34\x13\xe1\x10\xb8\x59\x59\x60\x8c\x85\x75\x67\x26\xca\x0e\x34\x87\x46\x38\x48\x85\x56\x92\xfd\x67\x1d\xa1\x79\x28\xbc\x33\x29\x25\x32\xbc\x10\x59\xe7\x36\x06\x4f\x2c\xbb\xc6\xa7\x19\xf2\x1c\x4d\x83\x0e\xe1\xda\x70\xd9\x0f\xb5\x0d\xdb\xdf\x51\xb2\x6e\x9b\x08\x2a\x36\x9b\xa1\xd2\x41\x78\xf3\xa8\x9c\x8c\x81\x8e\x67\xb5\x3c\x50\xf4\x6e\x7d\xdb\x52\x99\x5a\x4a\x21\x57\x27\x83\x4d\x8a\x43\x96\xd2\x3d\x7c\x30\xbe\x43\x83\xbd\xe3\x7d\x96\xec\x3f\x5d\x6f\x16\xbc\xc9\x38\xfc\xfd\x1f\x21\x95\xe4\x73\x23\xd4\x6e\xb5\x51\xcc\x35\xd9\x2d\x92\xc1\xed\xe5\x9f\x6f\xe6\x8b\xf1\x91\xf5\xad\x9f\x86\x16\x3f\x52\xec\x61\x6e\x6f\x66\x8b\xf1\x51\xee\x31\x34\xa8\x1c\xc2\xfc\x65\x3e\x9d\xb5\x7a\x68\x50\x3a\xa8\xe7\x74\x3e\xbf\x78\x7f\x35\x6d\x71\xdb\xaf\x17\x42\x3f\xf7\xc4\xb5\xff\xc8\x6f\xb9\xea\x2a\x3d\x6c\xcb\x26\x54\xed\x44\xc9\x16\x58\x69\x0f\x1b\xf8\x79\x7d\xd5\x0e\xaf\xaf\xcd\x39\xbd\x97\x30\x5c\x62\x50\x9a\xc6\x45\x28\x44\xe9\x67\x50\x2a\x06\x05\x76\xd1\x04\xe6\xbd\x18\x1c\xd9\x93\xa3\xfc\x44\x2b\xeb\x56\x06\xed\x49\x27\xa3\x6d\xd6\x36\x99\xe9\xcc\x4d\xe4\x5e\xe7\x3e\xbc\x54\xdb\x2a\xf2\x40\xb2\xdd\xc1\x94\x92\x40\xe9\x2b\xee\x1c\xf5\x3a\xd2\x8e\x93\xbf\x21\x97\xb6\x83\xc7\xff\xd1\xad\x2e\xe9\x60\x0c\xae\xd2\xcc\xcf\x98\xe9\xe6\xae\xd0\x56\xf3\x9a\xf4\x10\x72\x77\xd4\xdb\xd2\xb1\x51\xa0\x59\xd3\x7a\x3d\x05\x03\x38\x5f\xbe\x98\xad\x0e\xeb\xee\x0e\xa0\x6f\x68\x26\xa8\xd7\x3b\x38\x3e\x16\xc5\x31\x7e\x16\xd6\xd9\x43\x66\x46\x23\x70\xc8\x4d\xae\x9e\xa4\xef\xeb\xb5\x43\x0b\x59\x89\x5c\xd6\x1a\x1c\xb7\xf7\x16\x9e\xee\x50\xfa\xa7\x30\x7c\x80\x17\x42\x0a\x7b\xd7\x36\xb7\x43\x7e\xb6\x0a\xfb\x3f\xa7\x77\xc6\x6a\xff\xab\x48\x9b\xd6\x37\xa6\xf4\xa8\xc5\x83\x47\xfc\xcf\xa7\xf6\x4e\x33\x55\x96\xcd\xb0\x52\x8f\xf4\x8d\xd1\x69\x46\x7d\x75\x57\x92\xe2\x4d\x9a\x1f\x77\x86\x21\x50\xff\xf3\x89\x28\x36\x51\x1e\x08\xac\x3d\x1a\xfa\x78\xbc\x03\x7b\xb9\xda\x22\x9a\x67\xe9\xa1\x64\x37\x1a\x65\x32\x68\x3b\xca\x60\x08\xb9\x11\x8f\x68\xd8\xed\xfc\xe3\xd5\x59\x2d\xca\xfc\x63\x8d\x66\xdd\x3c\x19\xed\x97\x6a\xe0\xff\xcb\xeb\xb4\x7f\xd9\x9a\xef\xc1\xf4\xb5\xd6\x28\x45\x39\x7c\xf1\xfe\xec\xc6\xf2\x1c\xff\x3b\x00\x00\xff\xff\xa1\x67\x61\x83\x6e\x13\x00\x00")

func templates_testSingletonPsql_main_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_main_testGoTpl,
		"templates_test/singleton/psql_main_test.go.tpl",
	)
}

func templates_testSingletonPsql_main_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_main_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_main_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd4, 0x99, 0x16, 0x85, 0x72, 0x61, 0x66, 0xa7, 0x45, 0xbb, 0x44, 0xea, 0xe5, 0xf, 0x43, 0xb6, 0xe3, 0x86, 0x70, 0xcd, 0x74, 0x56, 0x24, 0x39, 0x7b, 0xdb, 0x45, 0xd3, 0x93, 0xdd, 0x42, 0xd1}}
	return a, nil
}

var _templates_testSingletonPsql_suites_testGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x0a\xc2\x30\x10\x44\xef\xfd\x8a\xa5\xe4\xd0\x4a\x9b\x0f\x10\x3c\x78\xd4\x83\x88\xb4\x1f\x10\xed\xb6\x04\xe2\x5a\xba\x5b\x10\x42\xfe\x5d\xd2\x46\xe9\xc1\xdb\x0c\x6f\x32\x99\xed\x67\x7a\x40\x83\x2c\xed\xc8\x38\x49\x21\xb0\x13\x64\xb1\x34\xe8\xa6\x04\x9f\x01\x78\x5f\xc3\x64\x68\x40\x50\x96\x3a\x7c\x57\xa0\xc4\xdc\x1d\xc2\xfe\x00\xba\x89\x8a\x43\x48\x39\xdb\x27\xa8\x4f\x7c\x7e\x59\x5a\x30\xd4\x3f\x8e\x8e\xb7\x56\x19\x67\x0d\xc7\x22\xa5\x8f\x51\x22\xaf\x8d\xdf\x96\x8b\x79\xe2\x92\x16\x7d\x9b\xa9\xc8\xbd\x5f\x9f\xe8\x76\xbc\xba\x79\x32\x2e\x84\xbc\x82\x38\xf8\x0f\x59\x2f\x2a\x97\xbf\x90\xba\xed\x8c\xe4\x42\xf6\x09\x00\x00\xff\xff\x11\x5d\x4c\xce\xff\x00\x00\x00")

func templates_testSingletonPsql_suites_testGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testSingletonPsql_suites_testGoTpl,
		"templates_test/singleton/psql_suites_test.go.tpl",
	)
}

func templates_testSingletonPsql_suites_testGoTpl() (*asset, error) {
	bytes, err := templates_testSingletonPsql_suites_testGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/singleton/psql_suites_test.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0xc4, 0x71, 0xaf, 0xd9, 0x16, 0x41, 0x8b, 0x4b, 0xfc, 0xe8, 0xba, 0xfd, 0xfa, 0x4d, 0x2c, 0x1, 0xd1, 0x0, 0xe1, 0xb0, 0x78, 0xee, 0x7f, 0xd0, 0x65, 0xf3, 0xa1, 0x43, 0xba, 0x3c, 0xe7}}
	return a, nil
}

var _templates_testUpsertGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xcd\x6e\xdb\x3c\x10\x3c\x8b\x4f\xb1\x9f\xf1\xb5\xa0\x0a\x85\x41\xaf\x29\x7c\x70\x7e\x0e\x41\x51\xc3\x88\xe5\x73\xc1\x48\x2b\x87\x30\x4d\x0a\xe4\xaa\xb6\x2b\xf0\xdd\x0b\x52\x4e\xe2\xfc\x15\x46\xd1\xa2\xe8\xc1\x96\x48\xcc\xce\xec\xce\xee\xaa\xef\x4f\xe0\x7f\xa9\x95\xf4\x70\x36\x06\x31\x89\x6f\xe8\x45\x29\x6f\x35\xc2\xf0\x10\x53\xb9\xc6\x10\x58\xd3\x99\x0a\x08\x3d\xf5\xfd\x10\x21\x16\xed\x4c\x77\x4e\xea\x10\x16\xad\x47\x47\x9c\xe0\x43\x04\x28\xb3\x14\x65\x0e\x3d\xcb\x48\xcc\xa4\x93\x5a\xa3\xe6\x39\x63\x99\x6a\x40\xa3\xe1\x0f\x04\x97\x76\x63\xe6\xca\x2c\x3b\x2d\x5d\x08\x13\xad\x2f\xac\xee\xd6\xc6\xe7\x30\x1e\xff\x0c\x39\x73\x6a\x2d\xdd\xee\x33\xee\x1e\x02\x7a\x96\x65\x24\xe6\x2b\xd5\xf2\x51\xfc\x6f\x95\x59\x02\xa5\x32\x36\x8a\xee\xc0\x1a\xbd\x83\x76\x88\x83\x15\xee\xa0\x1a\x22\x47\x39\xcb\x02\x63\x99\x47\xac\xa3\x05\x4e\x9a\xda\xae\xd5\x77\x14\x53\xdc\xcc\x11\x6b\x9e\xb3\xec\x9b\x74\x80\x2e\xfd\xac\x63\xd9\xe9\x29\x4c\x88\x70\xdd\x12\xd0\x1d\xc2\xf5\x74\x7e\x75\x53\x82\x57\x35\x82\x6d\x40\x1a\x58\xcc\xe2\x0d\xcb\x6c\x64\x3c\xb0\xeb\xb1\x82\x3e\x24\x37\x22\xe9\xa1\xe6\x9c\x5c\x57\x11\x8f\xc9\x14\xf0\xde\x16\xf0\x86\x01\x97\xe7\xe5\xae\x45\x5f\x00\xb9\x0e\xf3\x4f\x89\xe7\xbf\x31\x18\xa5\xf7\x46\x5c\xc5\x4c\x1b\x3e\x5a\x98\x64\x01\xd9\x47\x91\xd7\x13\x02\x9f\xa4\xcf\xe0\x9d\x1f\x15\x91\x6f\xef\x4b\xdf\xab\x06\x8c\x25\x10\x53\x7b\x61\x0d\xe1\x96\x42\xa8\x68\x1b\x2b\xab\x86\xb3\x38\x97\xd5\x6a\xe9\x6c\x67\x6a\x9e\xf7\x3d\x9a\x3a\x04\x96\x0d\x90\x2f\x9d\xa7\x72\xcb\x13\xcb\x21\xc3\x8b\x8b\x5b\xab\xb4\x38\xc7\xa5\x32\x89\x43\x7b\x3c\xbc\x2b\xb7\xbc\xa2\x6d\x11\x0b\xbc\x57\x38\x0a\x94\xb3\xac\xc6\x06\x1d\xc4\xe1\xe5\x39\xf4\xf0\x15\xc6\x40\x5b\x71\x63\xb5\xbe\x95\xd5\x8a\xe7\x10\x62\x87\x1f\x7a\x61\xc5\x7e\x96\xdf\x2a\x3c\xf6\x04\x4d\x0d\x27\x21\x40\x3c\x35\x52\x7b\x4c\xa2\x05\xa4\x5c\xae\x4d\x83\x8e\xe7\x4f\x4f\xc7\xf5\xa8\x4b\xd2\xaf\x37\xe8\x45\x67\x2a\xdb\x19\x4a\x17\xcf\xa6\xec\x7e\x29\x79\x2e\x2e\x22\xe6\xc8\x52\x1e\x5d\x78\x99\x25\xbf\x97\x8d\x90\x24\x1c\x41\x1f\x9f\x40\x46\x1b\x69\x08\xac\x41\x70\x58\x59\x57\x17\xb0\xb4\x74\x36\x2a\x06\xfc\x3e\xe9\x67\xab\xb3\x98\x5d\x4e\xca\xab\xd7\x56\xe7\x77\x2c\xc7\xbe\x35\xc7\x7e\x44\x84\x10\x7f\x74\x95\x7e\x7d\xc6\xe2\x96\xff\xe5\x11\xfb\x47\x26\x2c\xb0\x1f\x01\x00\x00\xff\xff\x53\x0f\x25\xbd\xd2\x06\x00\x00")

func templates_testUpsertGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templates_testUpsertGoTpl,
		"templates_test/upsert.go.tpl",
	)
}

func templates_testUpsertGoTpl() (*asset, error) {
	bytes, err := templates_testUpsertGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates_test/upsert.go.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xde, 0xdf, 0x7e, 0xe3, 0x82, 0x69, 0xda, 0x51, 0xad, 0xf5, 0x62, 0xf6, 0x3, 0xfb, 0x16, 0x16, 0xcf, 0x5a, 0xc7, 0x97, 0x5c, 0x53, 0x26, 0x8a, 0x91, 0x81, 0x86, 0x3b, 0x2c, 0x22, 0x58}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/17_upsert.go.tpl":                       templates17_upsertGoTpl,
	"templates/singleton/psql_upsert.go.tpl":           templatesSingletonPsql_upsertGoTpl,
	"templates_test/singleton/psql_main_test.go.tpl":   templates_testSingletonPsql_main_testGoTpl,
	"templates_test/singleton/psql_suites_test.go.tpl": templates_testSingletonPsql_suites_testGoTpl,
	"templates_test/upsert.go.tpl":                     templates_testUpsertGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"17_upsert.go.tpl": &bintree{templates17_upsertGoTpl, map[string]*bintree{}},
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_upsert.go.tpl": &bintree{templatesSingletonPsql_upsertGoTpl, map[string]*bintree{}},
		}},
	}},
	"templates_test": &bintree{nil, map[string]*bintree{
		"singleton": &bintree{nil, map[string]*bintree{
			"psql_main_test.go.tpl":   &bintree{templates_testSingletonPsql_main_testGoTpl, map[string]*bintree{}},
			"psql_suites_test.go.tpl": &bintree{templates_testSingletonPsql_suites_testGoTpl, map[string]*bintree{}},
		}},
		"upsert.go.tpl": &bintree{templates_testUpsertGoTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
